// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.test.TestEvent

sealed abstract class Reason(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = Reason
  def isNone: _root_.scala.Boolean = false
  def isJustCause: _root_.scala.Boolean = false
  def isNoParticularReason: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[Reason] = io.test.TestEvent.Reason
  final def asRecognized: _root_.scala.Option[io.test.TestEvent.Reason.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.test.TestEvent.Reason.Recognized])
}

object Reason extends _root_.scalapb.GeneratedEnumCompanion[Reason] {
  sealed trait Recognized extends Reason
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Reason] = this
  @SerialVersionUID(0L)
  case object None extends Reason(0) with Reason.Recognized {
    val index = 0
    val name = "None"
    override def isNone: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object JustCause extends Reason(1) with Reason.Recognized {
    val index = 1
    val name = "JustCause"
    override def isJustCause: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NoParticularReason extends Reason(2) with Reason.Recognized {
    val index = 2
    val name = "NoParticularReason"
    override def isNoParticularReason: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Reason(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.immutable.Seq(None, JustCause, NoParticularReason)
  def fromValue(__value: _root_.scala.Int): Reason = __value match {
    case 0 => None
    case 1 => JustCause
    case 2 => NoParticularReason
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = TestEventProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = TestEventProto.scalaDescriptor.enums(0)
}
@SerialVersionUID(0L)
final case class OuterEvent(
    innerEvent: io.test.TestEvent.OuterEvent.InnerEvent = io.test.TestEvent.OuterEvent.InnerEvent.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OuterEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (innerEvent.innerEventOne.isDefined) {
        val __value = innerEvent.innerEventOne.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (innerEvent.innerEventTwo.isDefined) {
        val __value = innerEvent.innerEventTwo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      innerEvent.innerEventOne.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      innerEvent.innerEventTwo.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getInnerEventOne: io.test.TestEvent.InnerEventOne = innerEvent.innerEventOne.getOrElse(io.test.TestEvent.InnerEventOne.defaultInstance)
    def withInnerEventOne(__v: io.test.TestEvent.InnerEventOne): OuterEvent = copy(innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventOne(__v))
    def getInnerEventTwo: io.test.TestEvent.InnerEventTwo = innerEvent.innerEventTwo.getOrElse(io.test.TestEvent.InnerEventTwo.defaultInstance)
    def withInnerEventTwo(__v: io.test.TestEvent.InnerEventTwo): OuterEvent = copy(innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventTwo(__v))
    def clearInnerEvent: OuterEvent = copy(innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.Empty)
    def withInnerEvent(__v: io.test.TestEvent.OuterEvent.InnerEvent): OuterEvent = copy(innerEvent = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => innerEvent.innerEventOne.orNull
        case 2 => innerEvent.innerEventTwo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => innerEvent.innerEventOne.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => innerEvent.innerEventTwo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.test.TestEvent.OuterEvent
    // @@protoc_insertion_point(GeneratedMessage[io.test.OuterEvent])
}

object OuterEvent extends scalapb.GeneratedMessageCompanion[io.test.TestEvent.OuterEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.test.TestEvent.OuterEvent] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.test.TestEvent.OuterEvent = {
    var __innerEvent: io.test.TestEvent.OuterEvent.InnerEvent = io.test.TestEvent.OuterEvent.InnerEvent.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventOne(__innerEvent.innerEventOne.fold(_root_.scalapb.LiteParser.readMessage[io.test.TestEvent.InnerEventOne](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventTwo(__innerEvent.innerEventTwo.fold(_root_.scalapb.LiteParser.readMessage[io.test.TestEvent.InnerEventTwo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.test.TestEvent.OuterEvent(
        innerEvent = __innerEvent,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.test.TestEvent.OuterEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.test.TestEvent.OuterEvent(
        innerEvent = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.test.TestEvent.InnerEventOne]]).map(io.test.TestEvent.OuterEvent.InnerEvent.InnerEventOne(_))
            .orElse[io.test.TestEvent.OuterEvent.InnerEvent](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.test.TestEvent.InnerEventTwo]]).map(io.test.TestEvent.OuterEvent.InnerEvent.InnerEventTwo(_)))
            .getOrElse(io.test.TestEvent.OuterEvent.InnerEvent.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestEventProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestEventProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.test.TestEvent.InnerEventOne
      case 2 => __out = io.test.TestEvent.InnerEventTwo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.test.TestEvent.OuterEvent(
    innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.Empty
  )
  sealed trait InnerEvent extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isInnerEventOne: _root_.scala.Boolean = false
    def isInnerEventTwo: _root_.scala.Boolean = false
    def innerEventOne: _root_.scala.Option[io.test.TestEvent.InnerEventOne] = _root_.scala.None
    def innerEventTwo: _root_.scala.Option[io.test.TestEvent.InnerEventTwo] = _root_.scala.None
  }
  object InnerEvent {
    @SerialVersionUID(0L)
    case object Empty extends io.test.TestEvent.OuterEvent.InnerEvent {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class InnerEventOne(value: io.test.TestEvent.InnerEventOne) extends io.test.TestEvent.OuterEvent.InnerEvent {
      type ValueType = io.test.TestEvent.InnerEventOne
      override def isInnerEventOne: _root_.scala.Boolean = true
      override def innerEventOne: _root_.scala.Option[io.test.TestEvent.InnerEventOne] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class InnerEventTwo(value: io.test.TestEvent.InnerEventTwo) extends io.test.TestEvent.OuterEvent.InnerEvent {
      type ValueType = io.test.TestEvent.InnerEventTwo
      override def isInnerEventTwo: _root_.scala.Boolean = true
      override def innerEventTwo: _root_.scala.Option[io.test.TestEvent.InnerEventTwo] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class OuterEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.OuterEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.test.TestEvent.OuterEvent](_l) {
    def innerEventOne: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.InnerEventOne] = field(_.getInnerEventOne)((c_, f_) => c_.copy(innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventOne(f_)))
    def innerEventTwo: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.InnerEventTwo] = field(_.getInnerEventTwo)((c_, f_) => c_.copy(innerEvent = io.test.TestEvent.OuterEvent.InnerEvent.InnerEventTwo(f_)))
    def innerEvent: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.OuterEvent.InnerEvent] = field(_.innerEvent)((c_, f_) => c_.copy(innerEvent = f_))
  }
  final val INNEREVENTONE_FIELD_NUMBER = 1
  final val INNEREVENTTWO_FIELD_NUMBER = 2
  def of(
    innerEvent: io.test.TestEvent.OuterEvent.InnerEvent
  ): _root_.io.test.TestEvent.OuterEvent = _root_.io.test.TestEvent.OuterEvent(
    innerEvent
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.test.OuterEvent])
}

@SerialVersionUID(0L)
final case class InnerEventOne(
    id: _root_.scala.Predef.String = "",
    reason: io.test.TestEvent.Reason = io.test.TestEvent.Reason.None,
    someSnakeCase: _root_.scala.Predef.String = "",
    someCamelCase: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InnerEventOne] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = reason.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      
      {
        val __value = someSnakeCase
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = someCamelCase
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = reason.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      {
        val __v = someSnakeCase
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = someCamelCase
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Predef.String): InnerEventOne = copy(id = __v)
    def withReason(__v: io.test.TestEvent.Reason): InnerEventOne = copy(reason = __v)
    def withSomeSnakeCase(__v: _root_.scala.Predef.String): InnerEventOne = copy(someSnakeCase = __v)
    def withSomeCamelCase(__v: _root_.scala.Predef.String): InnerEventOne = copy(someCamelCase = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = reason.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => {
          val __t = someSnakeCase
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = someCamelCase
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 3 => _root_.scalapb.descriptors.PEnum(reason.scalaValueDescriptor)
        case 4 => _root_.scalapb.descriptors.PString(someSnakeCase)
        case 5 => _root_.scalapb.descriptors.PString(someCamelCase)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.test.TestEvent.InnerEventOne
    // @@protoc_insertion_point(GeneratedMessage[io.test.InnerEventOne])
}

object InnerEventOne extends scalapb.GeneratedMessageCompanion[io.test.TestEvent.InnerEventOne] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.test.TestEvent.InnerEventOne] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.test.TestEvent.InnerEventOne = {
    var __id: _root_.scala.Predef.String = ""
    var __reason: io.test.TestEvent.Reason = io.test.TestEvent.Reason.None
    var __someSnakeCase: _root_.scala.Predef.String = ""
    var __someCamelCase: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _input__.readStringRequireUtf8()
        case 24 =>
          __reason = io.test.TestEvent.Reason.fromValue(_input__.readEnum())
        case 34 =>
          __someSnakeCase = _input__.readStringRequireUtf8()
        case 42 =>
          __someCamelCase = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.test.TestEvent.InnerEventOne(
        id = __id,
        reason = __reason,
        someSnakeCase = __someSnakeCase,
        someCamelCase = __someCamelCase,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.test.TestEvent.InnerEventOne] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.test.TestEvent.InnerEventOne(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        reason = io.test.TestEvent.Reason.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.test.TestEvent.Reason.None.scalaValueDescriptor).number),
        someSnakeCase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        someCamelCase = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestEventProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestEventProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => io.test.TestEvent.Reason
    }
  }
  lazy val defaultInstance = io.test.TestEvent.InnerEventOne(
    id = "",
    reason = io.test.TestEvent.Reason.None,
    someSnakeCase = "",
    someCamelCase = ""
  )
  implicit class InnerEventOneLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.InnerEventOne]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.test.TestEvent.InnerEventOne](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def reason: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.Reason] = field(_.reason)((c_, f_) => c_.copy(reason = f_))
    def someSnakeCase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.someSnakeCase)((c_, f_) => c_.copy(someSnakeCase = f_))
    def someCamelCase: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.someCamelCase)((c_, f_) => c_.copy(someCamelCase = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val REASON_FIELD_NUMBER = 3
  final val SOME_SNAKE_CASE_FIELD_NUMBER = 4
  final val SOMECAMELCASE_FIELD_NUMBER = 5
  def of(
    id: _root_.scala.Predef.String,
    reason: io.test.TestEvent.Reason,
    someSnakeCase: _root_.scala.Predef.String,
    someCamelCase: _root_.scala.Predef.String
  ): _root_.io.test.TestEvent.InnerEventOne = _root_.io.test.TestEvent.InnerEventOne(
    id,
    reason,
    someSnakeCase,
    someCamelCase
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.test.InnerEventOne])
}

@SerialVersionUID(0L)
final case class InnerEventTwo(
    id: _root_.scala.Predef.String = "",
    reason: io.test.TestEvent.Reason = io.test.TestEvent.Reason.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InnerEventTwo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = reason.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = reason.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Predef.String): InnerEventTwo = copy(id = __v)
    def withReason(__v: io.test.TestEvent.Reason): InnerEventTwo = copy(reason = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = reason.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 3 => _root_.scalapb.descriptors.PEnum(reason.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.test.TestEvent.InnerEventTwo
    // @@protoc_insertion_point(GeneratedMessage[io.test.InnerEventTwo])
}

object InnerEventTwo extends scalapb.GeneratedMessageCompanion[io.test.TestEvent.InnerEventTwo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.test.TestEvent.InnerEventTwo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.test.TestEvent.InnerEventTwo = {
    var __id: _root_.scala.Predef.String = ""
    var __reason: io.test.TestEvent.Reason = io.test.TestEvent.Reason.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _input__.readStringRequireUtf8()
        case 24 =>
          __reason = io.test.TestEvent.Reason.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.test.TestEvent.InnerEventTwo(
        id = __id,
        reason = __reason,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.test.TestEvent.InnerEventTwo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.test.TestEvent.InnerEventTwo(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        reason = io.test.TestEvent.Reason.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.test.TestEvent.Reason.None.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestEventProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestEventProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => io.test.TestEvent.Reason
    }
  }
  lazy val defaultInstance = io.test.TestEvent.InnerEventTwo(
    id = "",
    reason = io.test.TestEvent.Reason.None
  )
  implicit class InnerEventTwoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.InnerEventTwo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.test.TestEvent.InnerEventTwo](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def reason: _root_.scalapb.lenses.Lens[UpperPB, io.test.TestEvent.Reason] = field(_.reason)((c_, f_) => c_.copy(reason = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val REASON_FIELD_NUMBER = 3
  def of(
    id: _root_.scala.Predef.String,
    reason: io.test.TestEvent.Reason
  ): _root_.io.test.TestEvent.InnerEventTwo = _root_.io.test.TestEvent.InnerEventTwo(
    id,
    reason
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.test.InnerEventTwo])
}

object TestEventProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      io.test.TestEvent.OuterEvent,
      io.test.TestEvent.InnerEventOne,
      io.test.TestEvent.InnerEventTwo
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cg9UZXN0RXZlbnQucHJvdG8SB2lvLnRlc3QaFXNjYWxhcGIvc2NhbGFwYi5wcm90byLCAQoKT3V0ZXJFdmVudBJSCg1pbm5lc
  kV2ZW50T25lGAEgASgLMhYuaW8udGVzdC5Jbm5lckV2ZW50T25lQhLiPw8SDWlubmVyRXZlbnRPbmVIAFINaW5uZXJFdmVudE9uZ
  RJSCg1pbm5lckV2ZW50VHdvGAIgASgLMhYuaW8udGVzdC5Jbm5lckV2ZW50VHdvQhLiPw8SDWlubmVyRXZlbnRUd29IAFINaW5uZ
  XJFdmVudFR3b0IMCgppbm5lckV2ZW50ItQBCg1Jbm5lckV2ZW50T25lEhcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZBI0CgZyZWFzb
  24YAyABKA4yDy5pby50ZXN0LlJlYXNvbkIL4j8IEgZyZWFzb25SBnJlYXNvbhI6Cg9zb21lX3NuYWtlX2Nhc2UYBCABKAlCEuI/D
  xINc29tZVNuYWtlQ2FzZVINc29tZVNuYWtlQ2FzZRI4Cg1zb21lQ2FtZWxDYXNlGAUgASgJQhLiPw8SDXNvbWVDYW1lbENhc2VSD
  XNvbWVDYW1lbENhc2UiXgoNSW5uZXJFdmVudFR3bxIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSNAoGcmVhc29uGAMgASgOMg8ua
  W8udGVzdC5SZWFzb25CC+I/CBIGcmVhc29uUgZyZWFzb24qOQoGUmVhc29uEggKBE5vbmUQABINCglKdXN0Q2F1c2UQARIWChJOb
  1BhcnRpY3VsYXJSZWFzb24QAkIbCgdpby50ZXN0QglUZXN0RXZlbnTiPwQQACgBYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}